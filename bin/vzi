#!/usr/bin/env node
const help = `
Quickly override \`render_event\`, and keep the browser open:

 echo hello | vzi -c 'Sky = require('sky'); render_event = (ev, doc) => Sky.$(doc.body).hl(ev)' -K
 echo hello | vzi -c 'd3 = require('d3'); render_event = (ev, doc) => d3.select(doc.body).selectAll('div').data(ev)' -K

Use a script file:

 cat events | vzi my-pipe.js

And/or run headlessly:

 cat events | vzi -H
`

const fs = require('fs')
const os = require('os')
const url = require('url')
const http = require('http')
const path = require('path')
const stream = require('stream')
const browserify = require('browserify')
const WebSocket = require('ws')

function array(x) {
  return x instanceof Array ? x : (x == undefined ? [] : [x])
}

function usage(unknown) {
  return 'USAGE: vzi [-h] [-H] ([-c PIPE] | [PIPE.js]) ([-O] | [-o OUT]) [-p PORT]'
}

function exit(reason, code) {
  process.stderr.write(reason + '\n')
  process.exit(code)
}

function platformOpts() {
  // guess reasonable default options based on the platform
  switch (os.platform()) {
  case 'darwin':
    return {
      chrome_bin: '/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary'
    }
  default:
    return {}
  }
}

async function gatherOpts(args) {
  let opts = platformOpts()
  return Object.assign(opts, {
    args: args,
    headless: args.headless,
    keep_alive: args['keep-alive'],
    always: args.output ? true : false,
    define: await defineParams(args),
    format: await determineFormat(args),
    output: await determineOutput(args),
    pipe: await determinePipe(args),
    separator: args.separator,
    http_agent: new http.Agent({keepAlive: true}),
    project_root: path.join(__dirname, '..'),
    new_page: args['page-token'] ? false : true,
    page_token: args['page-token'] || Math.floor(Math.random() * 1e16),
    browser_path: args['browser-path'] || opts.chrome_bin || '',
    browser_port: args['browser-port'] || 9222,
    using_bindings: false,
    window_size: args['window-size'],
  })
}

async function defineParams(args) {
  let defs = array(args.define).reduce((a, d) => a.concat(array(d)), [])
  let define = {}
  for (let def of defs) {
    let [name, val] = def.split('=')
    let num = parseFloat(val)
    define[name] = isNaN(num) ? val : num;
  }
  return define;
}

async function determineFormat(args) {
  return args.format || 'unix'
}

async function determineOutput(args) {
  if (args['no-output'])
    return null;
  if (args['output'])
    return args.output;
  return process.stdout;
}

async function determinePipe(args) {
  if (args['cli'])
    return {cli: await readSource(args.cli)}
  if (args['module'])
    return {module: await readSourceFile(`${__dirname}/../www/${args.module}.js`)}
  return {file: args._[0] && await readSourceFile(args._[0])}
}

async function readSource(source) {
  const file = new stream.Readable()
  file.push(source)
  file.push(null)
  return bundle(new browserify({debug: true, basedir: __dirname}).add(file))
}

async function readSourceFile(filename) {
  return bundle(new browserify({debug: true}).add(filename))
}

async function bundle(bundler) {
  return new Promise(
    (okay, fail) =>
      bundler.bundle((err, buf) => {
        if (err)
          return fail(err)
        return okay(buf.toString())
      })
  )
}

class Client {
  constructor(opts) {
    this.opts = opts;
    this.pending = []
  }

  get pageURL() {
    const opts = this.opts;
    return `file://${opts.project_root}/www/index.html#${opts.page_token}`
  }

  async init() {
    await this.openBrowser()
    await this.connectPage()
  }

  async openBrowser() {
    const opts = this.opts;
    if (opts.using_bindings) // TODO: other programs could use this too
      return exit('Native bindings not yet implemented', 1)
    if (opts.new_page)
      return this.browser = await this.launchBrowser()
    // if its not a new page, we definitely shouldn't need to launch
    return this.browser = null;
  }

  async launchBrowser() {
    // spawn an external browser process
    const opts = this.opts;
    const args = [
      `--no-startup-window`,
      `--remote-debugging-port=${opts.browser_port}`
    ]
    if (opts.headless)
      args.push('--headless', '--disable-gpu')
    args.push(this.pageURL)
    return require('child_process').spawn(opts.browser_path, args, {detached: true})
  }

  async connectPage() {
    const opts = this.opts;
    const conf = JSON.stringify({
      always: opts.always,
      define: opts.define,
      format: opts.format,
      pipe: opts.pipe,
      separator: opts.separator
    })
    return new Promise(
      async (okay, fail) => {
        try {
          if (opts.new_page)
            await this.newPage((page) => this.findPage([page]))
          else
            await this.listPages((pages) => this.findPage(pages))

          const url = this.page.webSocketDebuggerUrl;
          if (!url)
            return fail(`Page has no available debugging socket`)

          this.socket = new WebSocket(url)
          this.socket.onopen = () => {
            const bootstrap = () => {
              okay(this.eval(`handle_init(${conf})`, (r) => {
                this.report(r, false)
              }))
            }
            if (opts.new_page) {
              this.send({method: 'Page.enable'})
              this.when({method: 'Page.loadEventFired'}, bootstrap)
            } else { // assume its already loaded
              bootstrap()
            }
          }
          this.socket.onerror = (e) => console.error('socket error', e)
          this.socket.onmessage = (m) => this.recv(m)
        } catch (e) {
          fail(e)
        }
      }
    )
  }

  async listPages(...args) {
    // NB: currently assumes remote browser
    return this.getJSON(`/json/list`, ...args)
  }

  async newPage(...args) {
    // NB: currently assumes remote browser
    return this.getJSON(`/json/new?${encodeURIComponent(this.pageURL)}`, ...args)
  }

  async getJSON(path, success = () => true, retries = 10, delay = 200) {
    const opts = this.opts, port = opts.browser_port;
    return new Promise(
      (okay, fail) => {
        const attempt = () => {
          if (retries-- < 1)
            return fail(`Failed to get ${path}`)
          http.request({
            path: path,
            port: port,
            agent: opts.http_agent
          }, (response) => {
            let buf = ''
            response.on('data', (d) => buf += d)
            response.on('end', () => {
              let obj = JSON.parse(buf)
              if (!success(obj))
                return setTimeout(attempt, delay)
              okay(obj)
            })
          }).on('error', (e) => {
            switch (e.code) {
            case 'ECONNRESET':
              return okay(null)
            case 'ECONNREFUSED':
              if (retries--)
                return setTimeout(attempt, delay)
              console.error(`Failed to talk to browser on ${port}: ${e}`)
              break;
            default:
              console.error(`Unexpected request error on ${port}: ${e}`)
              break;
            }
            fail(e)
          }).end()
        }
        attempt()
      }
    )
  }

  findPage(pages) {
    const hash = `#${this.opts.page_token}`
    for (let page of pages)
      if (url.parse(page.url).hash == hash)
        return this.page = page;
    return this.page = null;
  }

  report(result, final) {
    const opts = this.opts;
    if (opts.output == null)
      return;
    if (typeof opts.output == 'string')
      fs.writeFileSync(opts.output, result.value)
    else if (final)
      opts.output.write(result.value)
  }

  data(data) {
    const enc = data.toString('base64') // NB: ugh
    this.eval(`handle_data("${enc}")`, (r) => {
      this.report(r, false)
    })
  }

  done(then) {
    this.eval('handle_done()', (r) => {
      this.report(r, true)
      this.destroy(then)
    })
  }

  when(event, fun) {
    this.pending.push([event, fun])
  }

  eval(expression, fun) {
    let tagged = this.send({
      method: 'Runtime.evaluate',
      params: {expression: expression},
      returnByValue: true
    })
    this.when({id: tagged.id}, (o) => fun(o.result.result))
  }

  send(obj) {
    let tagged = Object.assign({
      id: Math.floor(Math.random() * 1e9)
    }, obj)
    this.socket.send(JSON.stringify(tagged))
    return tagged;
  }

  recv(msg) {
    const obj = JSON.parse(msg.data)
    this.pending.map(([ev, fun], i) => {
      for (let k in ev)
        if (ev[k] != obj[k])
          return;
      if (fun)
        fun(obj)
      this.pending.splice(i, 1)
    })
  }

  destroy(then) {
    if (this.opts.keep_alive)
      return then && then()
    if (this.pending.length)
      return setTimeout(() => this.destroy(), 100)
    this.browser && this.browser.kill()
    this.browser = null;
    return then && then()
  }
}

async function main() {
  let unknown;
  const spec = {
    alias: {
      'h': 'help',
      'H': 'headless',
      'K': 'keep-alive',
      'b': 'browser-path',
      'c': 'cli',
      'd': 'define',
      'f': 'format',
      'm': 'module',
      'O': 'no-output',
      'o': 'output',
      'p': 'browser-port',
      'P': 'page-token',
      's': 'separator',
      'w': 'window-size'
    },
    boolean: ['help', 'headless', 'keep-alive', 'no-output'],
    unknown: (opt) => {
      if (opt[0] != '-')
        return true // not opt-ish, add it to argv
      unknown = opt;
    }
  }

  const argv = require('minimist')(process.argv.slice(2), spec)
  if (unknown)
    return exit(usage(unknown), 1)
  if (argv.help)
    return exit(help)

  try {
    const opts = await gatherOpts(argv)
    const client = new Client(opts)
    let interrupts = 0

    try {
      await client.init()
      process.stdin.on('data', (d) => client.data(d))
      process.stdin.on('close', () => {
        client.done(() => process.exit())
      })
      process.on('SIGINT', () => {
        if (++interrupts > 2)
          process.exit()
        process.stdin.destroy()
      })
    } catch (e) {
      client.destroy()
      exit(`(*) ${e}`, 1)
    }

  } catch (e) {
    exit(`($) ${e}`, 1)
  }
}

if (require.main == module)
  main()